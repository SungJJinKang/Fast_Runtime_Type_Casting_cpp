#pragma once

#include "FAST_RUNTIME_TYPE_CASTING_ROOT_Macros.h"
#include "FAST_RUNTIME_TYPE_CASTING_ROOT_CLASS_Macros.h"



class FAST_RUNTIME_TYPE_CASTING_ROOT_CLASS
{
public:																		
	using __FAST_RUNTIME_TYPE_CASTING_CURRENT_TYPE = FAST_RUNTIME_TYPE_CASTING_ROOT_CLASS;				
	__FAST_RUNTIME_TYPE_CASTING_TYPE_ID_IMP(FAST_RUNTIME_TYPE_CASTING_ROOT_CLASS)					

private:
	constexpr static size_t __FAST_RUNTIME_TYPE_CASTING_BASE_CHAIN_COUNT = 1;
	constexpr static const std::array<const char*, 1> __FAST_RUNTIME_TYPE_CASTING__BASE_CHAIN_DATA{ __FAST_RUNTIME_TYPE_CASTING_CLASS_TYPE_ID };
public:
	__FAST_RUNTIME_TYPE_CASTING_FORCE_INLINE constexpr static size_t __FAST_RUNTIME_TYPE_CASTING_BASE_CHAIN_COUNT_STATIC()
	{
		return 1;
	}
	__FAST_RUNTIME_TYPE_CASTING_FORCE_INLINE constexpr static const char* const* __FAST_RUNTIME_TYPE_CASTING_BASE_CHAIN_DATA_STATIC()
	{
		return __FAST_RUNTIME_TYPE_CASTING__BASE_CHAIN_DATA.data();
	}
	virtual size_t __FAST_RUNTIME_TYPE_CASTING_GET_BASE_CHAIN_COUNT() const { return __FAST_RUNTIME_TYPE_CASTING_BASE_CHAIN_COUNT_STATIC(); }
	virtual const char* const* __FAST_RUNTIME_TYPE_CASTING_GET_BASE_CHAIN_DATA() const { return __FAST_RUNTIME_TYPE_CASTING_BASE_CHAIN_DATA_STATIC(); }


public:

	template <typename BASE_TYPE>
	__FAST_RUNTIME_TYPE_CASTING_FORCE_INLINE bool IsChildOf() const
	{
		static_assert(IS_DERIVED_FROM_FAST_RUNTIME_TYPE_CASTING_ROOT_CLASS(BASE_TYPE));

		const bool isChild = (__FAST_RUNTIME_TYPE_CASTING_GET_BASE_CHAIN_COUNT() >= BASE_TYPE::__FAST_RUNTIME_TYPE_CASTING_BASE_CHAIN_COUNT_STATIC()) && (__FAST_RUNTIME_TYPE_CASTING_GET_BASE_CHAIN_DATA()[__FAST_RUNTIME_TYPE_CASTING_GET_BASE_CHAIN_COUNT() - BASE_TYPE::__FAST_RUNTIME_TYPE_CASTING_BASE_CHAIN_COUNT_STATIC()] == BASE_TYPE::__FAST_RUNTIME_TYPE_CASTING_CLASS_TYPE_ID_STATIC());

		return isChild;
	}

};


